plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'com.palantir.docker' version '0.25.0'
    id "org.owasp.dependencycheck" version "7.2.0"
    id 'org.jetbrains.kotlin.kapt' version "${kotlin_version}"
}

dependencyCheck {
    format='HTML'
    failBuildOnCVSS=5
}

apply plugin: 'application'
apply plugin: 'com.palantir.docker'

group 'org.exactpro.th2'
version release_version

repositories {
    mavenCentral()
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
    flatDir{
        dirs 'libs'
    }
}

dependencies {
    api platform("com.exactpro.th2:bom:4.1.0")
    implementation 'com.exactpro.th2:codec:5.0.0-dev-version-5+'

    implementation 'com.exactpro.th2:common:5.1.0-dev-version-5+'

    implementation 'org.apache.commons:commons-collections4:4.4'


//    implementation 'org.quickfixj:quickfixj-core:2.3.1'
    implementation 'org.quickfixj:quickfixj-core-3.0.0-SNAPSHOT:3.0.0-SNAPSHOT.jar'
    implementation 'org.quickfixj:quickfixj-messages-all:2.3.1'

    implementation ("org.apache.mina:mina-core:2.2.1") {
        because("fix vulnerability in <quickfixj-messages-all>")
    }


    compileOnly 'com.google.auto.service:auto-service:1.0.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.0.1'
    kapt 'com.google.auto.service:auto-service:1.0.1'

    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation 'org.junit.platform:junit-platform-commons:1.8.2'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
}

test {
    useJUnitPlatform()
}

application {
    mainClassName 'com.exactpro.th2.codec.MainKt'
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}